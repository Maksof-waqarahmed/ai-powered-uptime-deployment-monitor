generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model SlackInstallation {
  id           String   @id @default(cuid())
  userId       String
  teamId       String
  teamName     String?
  channelId    String?
  channelName  String?
  webhookUrl   String // from incoming_webhook.url
  botUserId    String?
  authedUserId String?
  accessToken  String? // optional (if you ever use Web API)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([teamId])
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String?             @unique
  image             String?
  isBlocked         Boolean             @default(false) @map("is_blocked")
  emailVerified     DateTime?           @map("email_verified")
  accounts          Account[]
  monitors          Monitor[]
  SlackInstallation SlackInstallation[]

  @@map("user")
}

model Monitor {
  id            String       @id @default(cuid())
  name          String
  url           String
  checkInterval String
  timeout       String
  isDeleted     Boolean      @default(false)
  emailAlert    Boolean      @default(false)
  slackAlert    Boolean      @default(true)
  email         String?
  userId        SorLog[]

  @@map("monitor")
}

model MonitorLog {
  id           String   @id @default(cuid())
  monitorId    String
  status       Status
  httpCode     Int? // HTTP status code, if any
  responseTime Int? // in milliseconds
  errorMessage String? // if failed
  checkedAt    DateTime

  monitor Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId])
}

enum Status {
  UP
  DOWN
  ERROR
}
